{
  "contenido_md": "# Sesi√≥n 46: Uso de IA para generaci√≥n y manipulaci√≥n de datos I\n\n## ü§ù Acuerdos de clase\n- Ser amable y respetuosa\n- Participar activamente\n- Apoyarnos mutuamente\n- Mantener las c√°maras encendidas\n\n## üéØ Objetivos\n- Aprender a usar IA para generar datos de prueba\n- Manipular datos generados en componentes React\n- Practicar el uso de useState y useEffect con datos din√°micos\n\n## ü§î Pregunta de reflexi√≥n inicial\nSi pudieras crear una red social, ¬øqu√© tipo de datos necesitar√≠as para tus usuarios?\n\n## üìö Introducci√≥n a la generaci√≥n de datos con IA\n\n### ¬øPor qu√© necesitamos datos de prueba?\n- Para probar nuestros componentes\n- Para simular interacciones reales\n- Para visualizar el dise√±o con contenido\n\n### Ventajas de usar IA para generar datos\n- Datos realistas y coherentes\n- Ahorro de tiempo\n- Variedad de casos de prueba\n\n## üí° Usando ChatGPT para generar datos\n\n### Ejemplo de prompt b√°sico:\n\"Genera 5 objetos de usuario con: nombre, edad, correo y hobby\"\n\n### Mejorando el prompt:\n\"Genera 5 objetos de usuario en formato JSON con:\n- nombres hispanos femeninos\n- edades entre 15-25 a√±os\n- correos gmail\n- hobbies creativos\"\n\n## üõ†Ô∏è Pr√°ctica guiada 1: Generaci√≥n de datos\n\n1. Abre ChatGPT\n2. Copia el siguiente prompt:\n\"Crea 10 objetos de producto en JSON con:\n- nombre de producto tecnol√≥gico\n- precio entre $10-$100\n- descripci√≥n corta\n- categor√≠a (elegir entre: gadgets, accesorios, audio)\n- rating (1-5 estrellas)\"\n\n## üíª Actividad pr√°ctica 1\nUsa el JSON generado para crear un componente ProductList que:\n- Almacene los productos en useState\n- Muestre cada producto en una card\n- Incluya toda la informaci√≥n del producto\n\n## üîÑ Manipulaci√≥n de datos con IA\n\n### Transformaci√≥n de datos\nPodemos pedirle a la IA que transforme datos existentes:\n- Cambiar formato\n- Agregar campos\n- Filtrar informaci√≥n\n\n## üõ†Ô∏è Pr√°ctica guiada 2: Transformaci√≥n\n\nUsemos ChatGPT para:\n1. Agregar im√°genes a nuestros productos\n2. Convertir precios a formato moneda\n3. Agregar campos de stock y descuento\n\n## üíª Actividad pr√°ctica 2\nMejora tu componente ProductList:\n- Agrega los nuevos campos\n- Muestra precio formateado\n- Aplica estilos seg√∫n el stock/descuento\n\n## üé® Filtrado y ordenamiento\n\n### Usando IA para crear funciones de filtrado\nPodemos pedirle que nos ayude a crear:\n- Filtros por categor√≠a\n- Ordenamiento por precio\n- B√∫squeda por nombre\n\n## üíª Actividad final\nImplementa en tu ProductList:\n1. Un select para filtrar por categor√≠a\n2. Un bot√≥n para ordenar por precio\n3. Una barra de b√∫squeda\n\n## üåü Reto extra\nPide a ChatGPT que genere datos para un nuevo tipo de producto y adapta tu componente para mostrarlos.\n\n## üìù Reflexi√≥n final\n- ¬øQu√© ventajas encontraste al usar IA para generar datos?\n- ¬øQu√© otros casos de uso se te ocurren?\n- ¬øC√≥mo podr√≠as mejorar los prompts usados?\n\n## üè† Tarea\n1. Genera un nuevo conjunto de datos usando IA\n2. Crea un componente que los muestre\n3. Implementa al menos un filtro\n\n## üëã Cierre\n¬°Excelente trabajo! Ahora puedes usar IA para generar y manipular datos de prueba en tus proyectos React.",
  "necesita_codigo": true,
  "codigo_actividades": "// ProductList.jsx\nimport React, { useState } from 'react';\n\n// Datos de ejemplo generados por IA\nconst productosIniciales = [\n  {\n    id: 1,\n    nombre: \"Auriculares Bluetooth\",\n    precio: 49.99,\n    descripcion: \"Auriculares inal√°mbricos con cancelaci√≥n de ruido\",\n    categoria: \"audio\",\n    rating: 4.5\n  },\n  // ... m√°s productos\n];\n\nconst ProductList = () => {\n  const [productos, setProductos] = useState(productosIniciales);\n  const [categoria, setCategoria] = useState('todos');\n  const [busqueda, setBusqueda] = useState('');\n\n  const filtrarProductos = () => {\n    return productos\n      .filter(p => categoria === 'todos' || p.categoria === categoria)\n      .filter(p => p.nombre.toLowerCase().includes(busqueda.toLowerCase()));\n  };\n\n  const ordenarPorPrecio = () => {\n    const productosOrdenados = [...productos].sort((a, b) => a.precio - b.precio);\n    setProductos(productosOrdenados);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"controles\">\n        <select \n          value={categoria} \n          onChange={(e) => setCategoria(e.target.value)}\n        >\n          <option value=\"todos\">Todos</option>\n          <option value=\"gadgets\">Gadgets</option>\n          <option value=\"accesorios\">Accesorios</option>\n          <option value=\"audio\">Audio</option>\n        </select>\n\n        <input\n          type=\"text\"\n          placeholder=\"Buscar...\"\n          value={busqueda}\n          onChange={(e) => setBusqueda(e.target.value)}\n        />\n\n        <button onClick={ordenarPorPrecio}>\n          Ordenar por precio\n        </button>\n      </div>\n\n      <div className=\"productos-grid\">\n        {filtrarProductos().map(producto => (\n          <div key={producto.id} className=\"producto-card\">\n            <h3>{producto.nombre}</h3>\n            <p>${producto.precio.toFixed(2)}</p>\n            <p>{producto.descripcion}</p>\n            <p>Categor√≠a: {producto.categoria}</p>\n            <p>Rating: {producto.rating} ‚≠ê</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ProductList;",
  "necesita_capturas": false,
  "capturas_info": {}
}