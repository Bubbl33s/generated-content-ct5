# RESPUESTA RAW DE CLAUDE
# Esta es la respuesta exacta que envi√≥ Claude

{
  "contenido_md": "# Render Din√°mico con .map()\nSesi√≥n 48\n\n## ü§ù Acuerdos de clase\n- Ser amable y respetuosa\n- Participar activamente\n- Ayudarnos entre todas\n\n## üåü Para comenzar...\n¬øCu√°l es tu serie favorita y por qu√©?\n\n## üéØ Objetivos de la sesi√≥n\n- Comprender el concepto de render din√°mico\n- Dominar el uso del m√©todo .map() en React\n- Crear listas de elementos de forma eficiente\n\n## üìù ¬øQu√© es el render din√°mico?\nEs la capacidad de mostrar elementos en nuestra interfaz bas√°ndonos en datos que pueden cambiar.\n\nPor ejemplo:\n- Lista de productos en una tienda\n- Comentarios en una publicaci√≥n\n- Mensajes en un chat\n\n## üîÑ M√©todo .map()\nEs un m√©todo de arrays que nos permite:\n1. Recorrer un array\n2. Transformar cada elemento\n3. Crear un nuevo array con los resultados\n\n## üí° Ejemplo b√°sico con .map()\n```jsx\nconst nombres = ['Ana', 'Belen', 'Carmen'];\nconst saludos = nombres.map(nombre => {\n  return `¬°Hola ${nombre}!`;\n});\n```\n\n## üé¨ Pr√°ctica 1: Lista simple\nCreemos una lista de pel√≠culas:\n\n```jsx\nconst Peliculas = () => {\n  const peliculas = ['Barbie', 'Frozen', 'Moana'];\n  \n  return (\n    <ul>\n      {peliculas.map(pelicula => (\n        <li>{pelicula}</li>\n      ))}\n    </ul>\n  );\n};\n```\n\n## üîë La prop key\nReact necesita identificar cada elemento de forma √∫nica:\n\n```jsx\nconst Peliculas = () => {\n  const peliculas = ['Barbie', 'Frozen', 'Moana'];\n  \n  return (\n    <ul>\n      {peliculas.map((pelicula, index) => (\n        <li key={index}>{pelicula}</li>\n      ))}\n    </ul>\n  );\n};\n```\n\n## üé® Ejercicio 1\nCrea una lista de tus 3 colores favoritos usando .map()\n\n## üì± Trabajando con arrays de objetos\n```jsx\nconst productos = [\n  { id: 1, nombre: \"Laptop\", precio: 1000 },\n  { id: 2, nombre: \"Celular\", precio: 500 },\n  { id: 3, nombre: \"Tablet\", precio: 300 }\n];\n```\n\n## üõçÔ∏è Renderizando objetos\n```jsx\nconst ListaProductos = () => {\n  return (\n    <div>\n      {productos.map(producto => (\n        <div key={producto.id}>\n          <h3>{producto.nombre}</h3>\n          <p>${producto.precio}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n```\n\n## üé® Ejercicio 2\nCrea un array de 3 personajes favoritos con:\n- nombre\n- serie\n- poder\n\nY render√≠zalos usando .map()\n\n## üåà Estilos con .map()\nPodemos agregar estilos a cada elemento:\n\n```jsx\nconst Colores = () => {\n  const colores = ['red', 'blue', 'green'];\n  \n  return (\n    <div>\n      {colores.map(color => (\n        <div \n          key={color}\n          style={{ \n            backgroundColor: color,\n            width: '100px',\n            height: '100px'\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n```\n\n## üé® Ejercicio Final\nCrea una galer√≠a de tarjetas con:\n1. Array de 4 amigas\n2. Cada amiga tiene: nombre, hobby, color favorito\n3. Renderiza tarjetas con .map()\n4. Usa el color favorito en el dise√±o\n\n## üåü Bonus: Filtrado con .map()\n```jsx\nconst productos = [\n  { id: 1, nombre: \"Laptop\", precio: 1000 },\n  { id: 2, nombre: \"Celular\", precio: 500 },\n  { id: 3, nombre: \"Tablet\", precio: 300 }\n];\n\nconst ProductosCaros = () => {\n  return (\n    <div>\n      {productos\n        .filter(p => p.precio > 400)\n        .map(producto => (\n          <div key={producto.id}>\n            <h3>{producto.nombre}</h3>\n            <p>${producto.precio}</p>\n          </div>\n        ))}\n    </div>\n  );\n};\n```\n\n## üìù Resumen\n- .map() transforma arrays en elementos JSX\n- Siempre usar key en listas\n- Podemos mapear arrays de objetos\n- Combinable con estilos y filtros\n\n## üè† Tarea\nCrea una p√°gina de \"Mi Serie Favorita\" con:\n1. Array de personajes\n2. Cada personaje con: nombre, imagen, descripci√≥n\n3. Usa .map() para mostrarlos en tarjetas\n4. Agrega estilos para hacerlo atractivo\n\n¬°Excelente trabajo! üåü",
  "necesita_codigo": true,
  "codigo_actividades": "// Ejercicio 1: Lista de colores\nconst Colores = () => {\n  const colores = ['rosa', 'morado', 'azul'];\n  \n  return (\n    <ul>\n      {colores.map((color, index) => (\n        <li key={index}>{color}</li>\n      ))}\n    </ul>\n  );\n};\n\n// Ejercicio 2: Lista de personajes\nconst Personajes = () => {\n  const personajes = [\n    { id: 1, nombre: 'Harry Potter', serie: 'Harry Potter', poder: 'Magia' },\n    { id: 2, nombre: 'Eleven', serie: 'Stranger Things', poder: 'Telequinesis' },\n    { id: 3, nombre: 'Spider-Man', serie: 'Marvel', poder: 'Trepar paredes' }\n  ];\n\n  return (\n    <div>\n      {personajes.map(personaje => (\n        <div key={personaje.id}>\n          <h3>{personaje.nombre}</h3>\n          <p>Serie: {personaje.serie}</p>\n          <p>Poder: {personaje.poder}</p>\n        </div>\n      ))}\n    </div>\n  );\n};\n\n// Ejercicio Final: Galer√≠a de amigas\nconst GaleriaAmigas = () => {\n  const amigas = [\n    { id: 1, nombre: 'Ana', hobby: 'Pintar', colorFavorito: '#FF69B4' },\n    { id: 2, nombre: 'Belen', hobby: 'Bailar', colorFavorito: '#9370DB' },\n    { id: 3, nombre: 'Carmen', hobby: 'Cantar', colorFavorito: '#20B2AA' },\n    { id: 4, nombre: 'Diana', hobby: 'Fotograf√≠a', colorFavorito: '#FFB6C1' }\n  ];\n\n  return (\n    <div style={{ display: 'flex', gap: '20px', flexWrap: 'wrap' }}>\n      {amigas.map(amiga => (\n        <div\n          key={amiga.id}\n          style={{\n            padding: '20px',\n            borderRadius: '10px',\n            backgroundColor: amiga.colorFavorito,\n            color: 'white',\n            width: '200px'\n          }}\n        >\n          <h3>{amiga.nombre}</h3>\n          <p>Hobby: {amiga.hobby}</p>\n        </div>\n      ))}\n    </div>\n  );\n};",
  "necesita_capturas": false,
  "capturas_info": {}
}