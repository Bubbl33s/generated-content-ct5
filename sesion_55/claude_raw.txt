# RESPUESTA RAW DE CLAUDE
# Esta es la respuesta exacta que envió Claude

{
  "contenido_md": "# Hooks Personalizados 🎣\n\n## Bienvenida y Check-in (10 min)\n\n### 🤝 Acuerdos de clase\n- Ser amable y respetuosa\n- Participar activamente\n- Apoyarnos mutuamente\n\n### 🎯 ¿Qué aprenderemos hoy?\n- Qué son los hooks personalizados\n- Cómo crearlos\n- Cuándo usarlos\n- Buenas prácticas\n\n### 💭 Pregunta inicial\nSi pudieras crear tu propio superpoder para programar, ¿cuál sería?\n\n---\n\n## Introducción a Hooks Personalizados (20 min)\n\n### ¿Qué son?\n- Funciones que nos permiten reutilizar lógica entre componentes\n- Empiezan con la palabra 'use'\n- Nos ayudan a mantener nuestro código DRY (Don't Repeat Yourself)\n\n### Ejemplo de la vida real 🌟\nImagina que tienes varias recetas de cocina. En lugar de escribir los pasos comunes una y otra vez, los pones en una \"receta base\" que puedes reutilizar.\n\n---\n\n## Nuestro Primer Hook Personalizado (30 min)\n\n### useInput - Un hook para formularios\nVamos a crear un hook que nos ayude a manejar inputs de forma más sencilla.\n\n```jsx\nconst useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n  \n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n  \n  return [value, handleChange];\n};\n```\n\n### 💡 Actividad práctica (15 min)\nCreemos un formulario simple usando nuestro nuevo hook:\n\n```jsx\nfunction Formulario() {\n  const [nombre, handleNombre] = useInput('');\n  const [email, handleEmail] = useInput('');\n  \n  return (\n    <form>\n      <input value={nombre} onChange={handleNombre} placeholder=\"Tu nombre\" />\n      <input value={email} onChange={handleEmail} placeholder=\"Tu email\" />\n    </form>\n  );\n}\n```\n\n---\n\n## Hook para Tema Oscuro (30 min)\n\n### useDarkMode\nCreemos un hook para manejar el tema oscuro de nuestra aplicación:\n\n```jsx\nconst useDarkMode = () => {\n  const [isDark, setIsDark] = useState(false);\n  \n  const toggleDarkMode = () => {\n    setIsDark(!isDark);\n  };\n  \n  return [isDark, toggleDarkMode];\n};\n```\n\n### 🌗 Actividad práctica (20 min)\nImplementemos un botón para cambiar entre tema claro y oscuro:\n\n```jsx\nfunction TemaToggle() {\n  const [isDark, toggleDarkMode] = useDarkMode();\n  \n  return (\n    <button onClick={toggleDarkMode}>\n      {isDark ? \"Cambiar a tema claro\" : \"Cambiar a tema oscuro\"}\n    </button>\n  );\n}\n```\n\n---\n\n## Hook para Contador (30 min)\n\n### useCounter\nCreemos un hook para manejar contadores:\n\n```jsx\nconst useCounter = (initialValue = 0) => {\n  const [count, setCount] = useState(initialValue);\n  \n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n  const reset = () => setCount(initialValue);\n  \n  return [count, increment, decrement, reset];\n};\n```\n\n### 🔢 Actividad práctica (20 min)\nCreemos un componente que use nuestro hook:\n\n```jsx\nfunction Contador() {\n  const [count, increment, decrement, reset] = useCounter(0);\n  \n  return (\n    <div>\n      <p>Contador: {count}</p>\n      <button onClick={increment}>+</button>\n      <button onClick={decrement}>-</button>\n      <button onClick={reset}>Reset</button>\n    </div>\n  );\n}\n```\n\n---\n\n## Reglas y Buenas Prácticas (20 min)\n\n### 📌 Reglas importantes\n1. Siempre empezar el nombre con 'use'\n2. Solo llamar hooks en componentes o en otros hooks\n3. Mantener la lógica simple y reutilizable\n\n### 🎯 Tips\n- Crear hooks para lógica común\n- Documentar bien el propósito del hook\n- Mantener una única responsabilidad\n\n---\n\n## Proyecto Práctico (30 min)\n\n### 🎨 Creemos un hook para manejar colores favoritos\n\n```jsx\nconst useColorFavorito = () => {\n  const [color, setColor] = useState('#ffffff');\n  const [nombreColor, setNombreColor] = useState('');\n  \n  const cambiarColor = (nuevoColor, nombre) => {\n    setColor(nuevoColor);\n    setNombreColor(nombre);\n  };\n  \n  return [color, nombreColor, cambiarColor];\n};\n```\n\n### 🌈 Actividad final\nCrea un selector de colores favoritos usando el hook:\n\n```jsx\nfunction SelectorColores() {\n  const [color, nombreColor, cambiarColor] = useColorFavorito();\n  \n  return (\n    <div style={{ backgroundColor: color, padding: '20px' }}>\n      <h3>Mi color favorito es: {nombreColor}</h3>\n      <button onClick={() => cambiarColor('#ff69b4', 'Rosa')}>Rosa</button>\n      <button onClick={() => cambiarColor('#87ceeb', 'Celeste')}>Celeste</button>\n      <button onClick={() => cambiarColor('#98fb98', 'Verde menta')}>Verde menta</button>\n    </div>\n  );\n}\n```\n\n---\n\n## Cierre y Reflexión (10 min)\n\n### 💭 Preguntas de reflexión\n- ¿Qué ventajas viste al usar hooks personalizados?\n- ¿En qué otros casos crees que podrían ser útiles?\n- ¿Qué hook personalizado te gustaría crear?\n\n### 🌟 Tarea\nPiensa en una funcionalidad que se repita en tu proyecto y crea un hook personalizado para ella.\n\n### 👋 ¡Hasta la próxima clase!\nRecuerda: Los hooks personalizados son como tus propios superpoderes en React. ¡Úsalos sabiamente! 💪",
  "necesita_codigo": true,
  "codigo_actividades": "// Archivo: useInput.js\nexport const useInput = (initialValue) => {\n  const [value, setValue] = useState(initialValue);\n  \n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n  \n  return [value, handleChange];\n};\n\n// Archivo: useDarkMode.js\nexport const useDarkMode = () => {\n  const [isDark, setIsDark] = useState(false);\n  \n  const toggleDarkMode = () => {\n    setIsDark(!isDark);\n  };\n  \n  return [isDark, toggleDarkMode];\n};\n\n// Archivo: useCounter.js\nexport const useCounter = (initialValue = 0) => {\n  const [count, setCount] = useState(initialValue);\n  \n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n  const reset = () => setCount(initialValue);\n  \n  return [count, increment, decrement, reset];\n};\n\n// Archivo: useColorFavorito.js\nexport const useColorFavorito = () => {\n  const [color, setColor] = useState('#ffffff');\n  const [nombreColor, setNombreColor] = useState('');\n  \n  const cambiarColor = (nuevoColor, nombre) => {\n    setColor(nuevoColor);\n    setNombreColor(nombre);\n  };\n  \n  return [color, nombreColor, cambiarColor];\n};",
  "necesita_capturas": false,
  "capturas_info": {}
}