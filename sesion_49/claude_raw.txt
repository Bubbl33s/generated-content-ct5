# RESPUESTA RAW DE CLAUDE
# Esta es la respuesta exacta que envió Claude

{
  "contenido_md": "# Formulario Controlado + Validación\nSesión 49\n\n## 🤝 Acuerdos de clase\n- Ser amable y respetuosa\n- Participar activamente\n- Ayudar a las compañeras\n\n## 🎯 Objetivos\n- Crear formularios controlados en React\n- Implementar validación de campos\n- Manejar errores y feedback al usuario\n\n## 🤔 Pregunta inicial\n¿Alguna vez han llenado un formulario que les avise cuando algo está mal?\n¿Qué tipo de mensajes han visto?\n\n## 📝 Formularios Controlados\n\n### ¿Qué es un formulario controlado?\nEs un formulario donde React controla:\n- Los valores de los campos\n- Las actualizaciones de los campos\n- El envío del formulario\n\n### Ejemplo básico\n```jsx\nconst [nombre, setNombre] = useState('');\n\n<input \n  value={nombre}\n  onChange={(e) => setNombre(e.target.value)}\n/>\n```\n\n## 🏋️‍♀️ Ejercicio 1: Formulario Simple\nCreemos un formulario de registro con:\n- Nombre\n- Email\n- Contraseña\n\n## 💡 Validación de Campos\n\n### ¿Por qué validar?\n- Asegurar datos correctos\n- Mejor experiencia de usuario\n- Prevenir errores\n\n### Tipos de validación\n1. Campos requeridos\n2. Formato de email\n3. Longitud mínima/máxima\n4. Caracteres permitidos\n\n## 🛠️ Implementando Validación\n\n### Estado para errores\n```jsx\nconst [errores, setErrores] = useState({\n  nombre: '',\n  email: '',\n  password: ''\n});\n```\n\n### Función de validación\n```jsx\nconst validarCampo = (nombre, valor) => {\n  if (!valor) return 'Este campo es requerido';\n  if (nombre === 'email' && !valor.includes('@')) {\n    return 'Email inválido';\n  }\n  return '';\n}\n```\n\n## 🏋️‍♀️ Ejercicio 2: Agregar Validación\nAgregamos validación al formulario anterior:\n1. Nombre: mínimo 3 caracteres\n2. Email: formato válido\n3. Contraseña: mínimo 6 caracteres\n\n## 🎨 Mostrando Errores\n\n### Feedback visual\n- Mensajes de error en rojo\n- Bordes de input en rojo\n- Íconos de error/éxito\n\n## 🏋️‍♀️ Ejercicio Final\nCrear un formulario completo de registro con:\n1. Todos los campos necesarios\n2. Validación en tiempo real\n3. Mensajes de error claros\n4. Estilos para feedback\n\n## 🎯 Reto Extra\nAgregar validación de:\n- Contraseña fuerte (números + letras)\n- Confirmación de contraseña\n\n## 🏁 Cierre\n- Repaso de conceptos clave\n- Compartir dificultades encontradas\n- Mostrar formularios terminados",
  "necesita_codigo": true,
  "codigo_actividades": "// FormularioRegistro.jsx\nimport { useState } from 'react';\n\nfunction FormularioRegistro() {\n  const [datos, setDatos] = useState({\n    nombre: '',\n    email: '',\n    password: ''\n  });\n\n  const [errores, setErrores] = useState({\n    nombre: '',\n    email: '',\n    password: ''\n  });\n\n  const validarCampo = (nombre, valor) => {\n    switch(nombre) {\n      case 'nombre':\n        if (valor.length < 3) return 'El nombre debe tener al menos 3 caracteres';\n        break;\n      case 'email':\n        if (!valor.includes('@')) return 'Email inválido';\n        break;\n      case 'password':\n        if (valor.length < 6) return 'La contraseña debe tener al menos 6 caracteres';\n        break;\n      default:\n        return '';\n    }\n    return '';\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setDatos(prev => ({\n      ...prev,\n      [name]: value\n    }));\n    \n    const error = validarCampo(name, value);\n    setErrores(prev => ({\n      ...prev,\n      [name]: error\n    }));\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Validar todos los campos antes de enviar\n    const nuevosErrores = {};\n    Object.keys(datos).forEach(campo => {\n      nuevosErrores[campo] = validarCampo(campo, datos[campo]);\n    });\n    setErrores(nuevosErrores);\n\n    // Si no hay errores, enviar el formulario\n    if (!Object.values(nuevosErrores).some(error => error !== '')) {\n      console.log('Formulario válido', datos);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"formulario\">\n      <div className=\"campo\">\n        <label>Nombre:</label>\n        <input\n          type=\"text\"\n          name=\"nombre\"\n          value={datos.nombre}\n          onChange={handleChange}\n          className={errores.nombre ? 'error' : ''}\n        />\n        {errores.nombre && <span className=\"mensaje-error\">{errores.nombre}</span>}\n      </div>\n\n      <div className=\"campo\">\n        <label>Email:</label>\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={datos.email}\n          onChange={handleChange}\n          className={errores.email ? 'error' : ''}\n        />\n        {errores.email && <span className=\"mensaje-error\">{errores.email}</span>}\n      </div>\n\n      <div className=\"campo\">\n        <label>Contraseña:</label>\n        <input\n          type=\"password\"\n          name=\"password\"\n          value={datos.password}\n          onChange={handleChange}\n          className={errores.password ? 'error' : ''}\n        />\n        {errores.password && <span className=\"mensaje-error\">{errores.password}</span>}\n      </div>\n\n      <button type=\"submit\">Registrarse</button>\n    </form>\n  );\n}\n\nexport default FormularioRegistro;",
  "necesita_capturas": false,
  "capturas_info": {}
}