# RESPUESTA RAW DE CLAUDE
# Esta es la respuesta exacta que envió Claude

{
  "contenido_md": "# Context API - Estado Global 🌍\n\n## Acuerdos de clase 🤝\n- Ser amable y respetuosa\n- Participar activamente\n- Apoyarnos entre todas\n\n## ¿Qué harías si...? 🤔\nTu mejor amiga te pide prestada tu cuenta de Netflix/Disney+/etc. ¿Se la prestarías? ¿Por qué?\n\n## Recordemos lo aprendido 🧠\n- Hemos trabajado con props para pasar datos entre componentes\n- Las props van de padre a hijo\n- A veces necesitamos compartir datos entre componentes distantes\n\n## ¿Qué es el estado global? 🌐\nImagina que tienes una app de redes sociales:\n- Nombre de usuario\n- Foto de perfil\n- Tema (claro/oscuro)\n\n¿Necesitas estos datos en MUCHOS componentes diferentes?\n¡El estado global es la solución!\n\n## Context API al rescate 🦸‍♀️\n- Es como un \"almacén central\" de datos\n- Cualquier componente puede acceder a él\n- No más prop drilling (pasar props por muchos niveles)\n\n## Creando nuestro primer Context 🎨\n\n1. Crear el contexto:\n```jsx\n// ThemeContext.js\nimport { createContext } from 'react';\nexport const ThemeContext = createContext();\n```\n\n2. Crear el Provider:\n```jsx\n// ThemeProvider.js\nimport { ThemeContext } from './ThemeContext';\n\nexport const ThemeProvider = ({ children }) => {\n  const theme = {\n    color: 'purple',\n    background: 'white'\n  };\n\n  return (\n    <ThemeContext.Provider value={theme}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n```\n\n## ¡Hora de practicar! 💪\n\n### Ejercicio 1: Mi primer Context\nCreemos un context para manejar el nombre de usuario:\n\n1. Crea UserContext.js\n2. Implementa el Provider\n3. Úsalo en la App\n\n### Ejercicio 2: Tema Personalizado 🎨\nVamos a crear un context para manejar el tema de nuestra app:\n\n1. Crear ThemeContext\n2. Agregar colores personalizados\n3. Aplicarlo a componentes\n\n## Break ☕ (15 minutos)\n\n## Usando el Context 🛠️\n\nPara usar nuestro context:\n```jsx\nimport { useContext } from 'react';\nimport { ThemeContext } from './ThemeContext';\n\nfunction MiComponente() {\n  const theme = useContext(ThemeContext);\n  return (\n    <div style={{ color: theme.color }}>\n      ¡Hola Mundo!\n    </div>\n  );\n}\n```\n\n## Ejercicio Grupal: Mini Red Social 👥\n\nEn equipos de 3, vamos a crear:\n1. UserContext para datos del usuario\n2. ThemeContext para personalización\n3. Componentes que usen ambos contexts\n\n## Reglas importantes 📝\n\n1. El Provider debe envolver los componentes\n2. useContext solo funciona dentro de componentes\n3. Los contexts son para datos que se usan en muchos lugares\n\n## Actividad Final: Twitter Simplificado 🐦\n\nCrear una versión simple de Twitter usando Context para:\n- Datos del usuario actual\n- Tema de la aplicación\n- Lista de tweets\n\n## Reflexión final 🤔\n\n- ¿Cuándo conviene usar Context?\n- ¿Cuándo es mejor usar props?\n- ¿Qué aprendiste hoy?\n\n## Tarea 📚\n\n1. Completar el Twitter simplificado\n2. Agregar al menos 3 componentes que usen el context\n3. Implementar cambio de tema (claro/oscuro)\n\n¡Nos vemos en la próxima clase! 👋",
  "necesita_codigo": true,
  "codigo_actividades": "// UserContext.js\nimport { createContext } from 'react';\nexport const UserContext = createContext();\n\n// UserProvider.js\nimport { UserContext } from './UserContext';\nimport { useState } from 'react';\n\nexport const UserProvider = ({ children }) => {\n  const [user, setUser] = useState({\n    username: 'CoderGirl123',\n    avatar: '👩‍💻',\n    isLoggedIn: true\n  });\n\n  return (\n    <UserContext.Provider value={{ user, setUser }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\n// App.js\nimport { UserProvider } from './UserProvider';\nimport { ThemeProvider } from './ThemeProvider';\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <UserProvider>\n        <MainContent />\n      </UserProvider>\n    </ThemeProvider>\n  );\n}\n\n// MainContent.js\nimport { useContext } from 'react';\nimport { UserContext } from './UserContext';\nimport { ThemeContext } from './ThemeContext';\n\nfunction MainContent() {\n  const { user } = useContext(UserContext);\n  const theme = useContext(ThemeContext);\n\n  return (\n    <div style={{ background: theme.background, color: theme.color }}>\n      <h1>Bienvenida {user.username}</h1>\n      <div>{user.avatar}</div>\n    </div>\n  );\n}",
  "necesita_capturas": false,
  "capturas_info": {}
}